# -*- coding: utf-8 -*-
# Generated by Django 1.11.20 on 2019-06-15 07:23
from __future__ import unicode_literals

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Checker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checker_type', models.CharField(choices=[('4', '404'), ('X', '404_OR_X_PATH')], default='4', max_length=1)),
                ('checker_x_path', models.TextField(blank=True)),
                ('checker_x_path_result', models.TextField(blank=True)),
                ('checker_ref_url', models.URLField(blank=True, max_length=500)),
                ('comments', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=255)),
                ('ref_object', models.CharField(max_length=200)),
                ('type', models.CharField(blank=True, max_length=25)),
                ('level', models.IntegerField(choices=[(50, 'CRITICAL'), (40, 'ERROR'), (30, 'WARNING'), (20, 'INFO'), (10, 'DEBUG')])),
                ('spider_name', models.CharField(max_length=200)),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
            ],
            options={
                'ordering': ['-date'],
                'db_tablespace': 'tables',
            },
        ),
        migrations.CreateModel(
            name='LogMarker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_contains', models.CharField(max_length=255)),
                ('ref_object', models.CharField(blank=True, max_length=200)),
                ('mark_with_type', models.CharField(choices=[('PE', 'Planned Error'), ('DD', 'Dirty Data'), ('IM', 'Important'), ('IG', 'Ignore'), ('MI', 'Miscellaneous'), ('CU', 'Custom')], help_text='Choose "Custom" and enter your own type in the next field for a custom type', max_length=2)),
                ('custom_type', models.CharField(blank=True, max_length=25)),
                ('spider_name', models.CharField(blank=True, max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='RequestPageType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_type', models.CharField(choices=[('MP', 'Main Page'), ('FP', 'Follow Page'), ('DP1', 'Detail Page 1'), ('DP2', 'Detail Page 2'), ('DP3', 'Detail Page 3'), ('DP4', 'Detail Page 4'), ('DP5', 'Detail Page 5'), ('DP6', 'Detail Page 6'), ('DP7', 'Detail Page 7'), ('DP8', 'Detail Page 8'), ('DP9', 'Detail Page 9'), ('DP10', 'Detail Page 10'), ('DP11', 'Detail Page 11'), ('DP12', 'Detail Page 12'), ('DP13', 'Detail Page 13'), ('DP14', 'Detail Page 14'), ('DP15', 'Detail Page 15'), ('DP16', 'Detail Page 16'), ('DP17', 'Detail Page 17'), ('DP18', 'Detail Page 18'), ('DP19', 'Detail Page 19'), ('DP20', 'Detail Page 20'), ('DP21', 'Detail Page 21'), ('DP22', 'Detail Page 22'), ('DP23', 'Detail Page 23'), ('DP24', 'Detail Page 24'), ('DP25', 'Detail Page 25')], help_text='One main page RPT, an optional follow page RPT (if follow pagination is used) and detail page RPTs for all DETAIL_PAGE_URLs', max_length=3)),
                ('content_type', models.CharField(choices=[('H', 'HTML'), ('X', 'XML'), ('J', 'JSON')], default='H', help_text='Data type format for scraped pages of page type (for JSON use JSONPath instead of XPath)', max_length=1)),
                ('render_javascript', models.BooleanField(default=False, help_text='Render Javascript on pages (ScrapyJS/Splash deployment needed, careful: resource intense)')),
                ('request_type', models.CharField(choices=[('R', 'Request'), ('F', 'FormRequest')], default='R', help_text='Normal (typically GET) request (default) or form request (typically POST), using Scrapys corresponding request classes (not used for checker).', max_length=1)),
                ('method', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST')], default='GET', help_text='HTTP request via GET or POST.', max_length=10)),
                ('headers', models.TextField(blank=True, help_text='Optional HTTP headers sent with each request, provided as a JSON dict (e.g. {"Referer":"http://referer_url"}, use double quotes!)), can use {main page attribute}, {page} and {follow_page} placeholders.')),
                ('body', models.TextField(blank=True, help_text='Optional HTTP message body provided as a unicode string, can use {main page attribute}, {page} and {follow_page} placeholders.')),
                ('cookies', models.TextField(blank=True, help_text='Optional cookies as JSON dict (use double quotes!), can use {main page attribute}, {page} and {follow_page} placeholders.')),
                ('meta', models.TextField(blank=True, help_text='Optional Scrapy meta attributes as JSON dict (use double quotes!), see Scrapy docs for reference.')),
                ('form_data', models.TextField(blank=True, help_text='Optional HTML form data as JSON dict (use double quotes!), only used with FormRequest request type, can use {main page attribute}, {page} and {follow_page} placeholders.')),
                ('dont_filter', models.BooleanField(default=False, help_text='Do not filter duplicate requests, useful for some scenarios with requests falsely marked as being duplicate (e.g. uniform URL + pagination by HTTP header).')),
                ('comments', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='SchedulerRuntime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('runtime_type', models.CharField(choices=[('S', 'SCRAPER'), ('C', 'CHECKER')], default='P', max_length=1)),
                ('next_action_time', models.DateTimeField(default=datetime.datetime.now)),
                ('next_action_factor', models.FloatField(blank=True, null=True)),
                ('num_zero_actions', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['next_action_time'],
                'db_tablespace': 'tables',
            },
        ),
        migrations.CreateModel(
            name='ScrapedObjAttr',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('order', models.IntegerField(default=100)),
                ('attr_type', models.CharField(choices=[('S', 'STANDARD'), ('T', 'STANDARD (UPDATE)'), ('B', 'BASE'), ('U', 'DETAIL_PAGE_URL'), ('I', 'IMAGE')], max_length=1)),
                ('id_field', models.BooleanField(default=False)),
                ('save_to_db', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['order'],
                'db_tablespace': 'tables',
            },
        ),
        migrations.CreateModel(
            name='ScrapedObjClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('scraper_scheduler_conf', models.TextField(default='"MIN_TIME": 15,\n"MAX_TIME": 10080,\n"INITIAL_NEXT_ACTION_FACTOR": 10,\n"ZERO_ACTIONS_FACTOR_CHANGE": 20,\n"FACTOR_CHANGE_FACTOR": 1.3,\n')),
                ('checker_scheduler_conf', models.TextField(default='"MIN_TIME": 1440,\n"MAX_TIME": 10080,\n"INITIAL_NEXT_ACTION_FACTOR": 1,\n"ZERO_ACTIONS_FACTOR_CHANGE": 5,\n"FACTOR_CHANGE_FACTOR": 1.3,\n')),
                ('comments', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Scraped object class',
                'verbose_name_plural': 'Scraped object classes',
                'ordering': ['name'],
                'db_tablespace': 'tables',
            },
        ),
        migrations.CreateModel(
            name='Scraper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('status', models.CharField(choices=[('A', 'ACTIVE'), ('M', 'MANUAL'), ('P', 'PAUSED'), ('I', 'INACTIVE')], default='P', help_text='Runtime status of the scraper, used by scheduling mechanism.', max_length=1)),
                ('work_status', models.CharField(choices=[('R2', 'REVISION NEEDED (MAJOR)'), ('R1', 'REVISION NEEDED (MINOR)'), ('UR', 'UNRESOLVED'), ('BR', 'BROKEN'), ('W', 'WORKING'), ('RC', 'RELEASE CANDIDATE'), ('BE', 'BETA'), ('A', 'ALPHA'), ('D', 'DRAFT'), ('S', 'SUSPENDED'), ('U', 'UNKNOWN'), ('N', 'NOT SET')], default='N', help_text='Internal work/progress status of the scraper.', max_length=2)),
                ('owner', models.CharField(blank=True, help_text='Optional owner when working on scrapers with various people', max_length=12)),
                ('max_items_read', models.IntegerField(blank=True, help_text='Max number of items to be read (empty: unlimited).', null=True)),
                ('max_items_save', models.IntegerField(blank=True, help_text='Max number of items to be saved (empty: unlimited).', null=True)),
                ('pagination_type', models.CharField(choices=[('N', 'NONE'), ('R', 'RANGE_FUNCT (+FOLLOW)'), ('F', 'FREE_LIST (+FOLLOW)'), ('O', 'FOLLOW')], default='N', max_length=1)),
                ('pagination_on_start', models.BooleanField(default=False)),
                ('pagination_append_str', models.CharField(blank=True, help_text='Syntax: /somepartofurl/{page}/moreurlstuff.html', max_length=200)),
                ('pagination_page_replace', models.TextField(blank=True, help_text="RANGE_FUNCT: uses Python range funct., syntax: [start], stop[, step], FREE_LIST: 'Replace text 1', 'Some other text 2', 'Maybe a number 3', ...")),
                ('follow_pages_url_xpath', models.TextField(blank=True, help_text='Optional, follow links from a single non-paginated or all statically paginated (RANGE_FUNCT, FREE_LIST) main pages')),
                ('follow_pages_page_xpath', models.TextField(blank=True, help_text='Optional additional XPath for the page number, can be used in {follow_page} placeholder.')),
                ('num_pages_follow', models.IntegerField(blank=True, help_text='Optionally limit number of pages to follow (default: follow until XPath fails)', null=True)),
                ('last_scraper_save_alert_period', models.CharField(blank=True, help_text="Optional, used for scraper monitoring with 'check_last_scraper_saves' management cmd,         syntax: [HOURS]h or [DAYS]d or [WEEKS]w (e.g. '6h', '5d', '2w')", max_length=5)),
                ('next_last_scraper_save_alert', models.DateTimeField(default=datetime.datetime.now, help_text='Next time the last scraper save will be alerted, normally set on management cmd run.')),
                ('last_checker_delete_alert_period', models.CharField(blank=True, help_text="Optional, used for scraper monitoring with 'check_last_checker_deletes' management cmd,         syntax: [HOURS]h or [DAYS]d or [WEEKS]w (e.g. '6h', '5d', '2w')", max_length=5)),
                ('next_last_checker_delete_alert', models.DateTimeField(default=datetime.datetime.now, help_text='Next time the last checker delete will be alerted, normally set on management cmd run.')),
                ('comments', models.TextField(blank=True)),
                ('last_scraper_save', models.DateTimeField(blank=True, null=True)),
                ('last_checker_delete', models.DateTimeField(blank=True, null=True)),
                ('scraped_obj_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dynamic_scraper.ScrapedObjClass')),
            ],
            options={
                'ordering': ['name', 'scraped_obj_class'],
                'db_tablespace': 'tables',
            },
        ),
        migrations.CreateModel(
            name='ScraperElem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x_path', models.TextField(blank=True, help_text='XPath or JSONPath expression, leave blank on "static" processor use.')),
                ('reg_exp', models.TextField(blank=True, help_text="Optional filtering by regular expression (e.g. 'Scrape only (.*) the text in between').")),
                ('request_page_type', models.CharField(choices=[('MP', 'Main Page'), ('DP1', 'Detail Page 1'), ('DP2', 'Detail Page 2'), ('DP3', 'Detail Page 3'), ('DP4', 'Detail Page 4'), ('DP5', 'Detail Page 5'), ('DP6', 'Detail Page 6'), ('DP7', 'Detail Page 7'), ('DP8', 'Detail Page 8'), ('DP9', 'Detail Page 9'), ('DP10', 'Detail Page 10'), ('DP11', 'Detail Page 11'), ('DP12', 'Detail Page 12'), ('DP13', 'Detail Page 13'), ('DP14', 'Detail Page 14'), ('DP15', 'Detail Page 15'), ('DP16', 'Detail Page 16'), ('DP17', 'Detail Page 17'), ('DP18', 'Detail Page 18'), ('DP19', 'Detail Page 19'), ('DP20', 'Detail Page 20'), ('DP21', 'Detail Page 21'), ('DP22', 'Detail Page 22'), ('DP23', 'Detail Page 23'), ('DP24', 'Detail Page 24'), ('DP25', 'Detail Page 25')], default='MP', help_text='Corresponding Request Page Types created for this scraper.', max_length=3)),
                ('use_default_procs', models.BooleanField(default=True, help_text='Use the default processors (Scrapy TakeFirst, DDS string_strip) for convenience.')),
                ('processors', models.TextField(blank=True, help_text='Optional comma-separated list of processors used (e.g. "pre_url, post_string").')),
                ('proc_ctxt', models.TextField(blank=True, help_text="Comma-separated aditional context (depending on processor) (e.g. 'pre_url': 'http://append_before.org/', 'post_string': '?append_after=True').")),
                ('mandatory', models.BooleanField(default=True, help_text='Drop item if attribute could not be scraped.')),
                ('scraped_obj_attr', models.ForeignKey(help_text='The different attributes to be scraped, exactly one attribute of type BASE necessary.', on_delete=django.db.models.deletion.CASCADE, to='dynamic_scraper.ScrapedObjAttr')),
                ('scraper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dynamic_scraper.Scraper')),
            ],
            options={
                'ordering': ['scraped_obj_attr__order'],
            },
        ),
        migrations.AddField(
            model_name='scrapedobjattr',
            name='obj_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dynamic_scraper.ScrapedObjClass'),
        ),
        migrations.AddField(
            model_name='requestpagetype',
            name='scraped_obj_attr',
            field=models.ForeignKey(blank=True, help_text='Empty for main page, attribute of type DETAIL_PAGE_URL scraped from main page for detail pages.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dynamic_scraper.ScrapedObjAttr'),
        ),
        migrations.AddField(
            model_name='requestpagetype',
            name='scraper',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dynamic_scraper.Scraper'),
        ),
        migrations.AddField(
            model_name='logmarker',
            name='scraper',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dynamic_scraper.Scraper'),
        ),
        migrations.AddField(
            model_name='log',
            name='scraper',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dynamic_scraper.Scraper'),
        ),
        migrations.AddField(
            model_name='checker',
            name='scraped_obj_attr',
            field=models.ForeignKey(help_text='Attribute of type DETAIL_PAGE_URL, several checkers for same DETAIL_PAGE_URL attribute possible.', on_delete=django.db.models.deletion.CASCADE, to='dynamic_scraper.ScrapedObjAttr'),
        ),
        migrations.AddField(
            model_name='checker',
            name='scraper',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dynamic_scraper.Scraper'),
        ),
    ]
